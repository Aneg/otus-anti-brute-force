// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: api/api.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *CheckRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CheckRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ClearBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip    string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Login string `protobuf:"bytes,2,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *ClearBucketRequest) Reset() {
	*x = ClearBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearBucketRequest) ProtoMessage() {}

func (x *ClearBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearBucketRequest.ProtoReflect.Descriptor instead.
func (*ClearBucketRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *ClearBucketRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ClearBucketRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

type AddWhiteMaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask string `protobuf:"bytes,1,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *AddWhiteMaskRequest) Reset() {
	*x = AddWhiteMaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWhiteMaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWhiteMaskRequest) ProtoMessage() {}

func (x *AddWhiteMaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWhiteMaskRequest.ProtoReflect.Descriptor instead.
func (*AddWhiteMaskRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *AddWhiteMaskRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type DropWhiteMaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask string `protobuf:"bytes,1,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *DropWhiteMaskRequest) Reset() {
	*x = DropWhiteMaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropWhiteMaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropWhiteMaskRequest) ProtoMessage() {}

func (x *DropWhiteMaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropWhiteMaskRequest.ProtoReflect.Descriptor instead.
func (*DropWhiteMaskRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{3}
}

func (x *DropWhiteMaskRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type AddBlackMaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask string `protobuf:"bytes,1,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *AddBlackMaskRequest) Reset() {
	*x = AddBlackMaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlackMaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlackMaskRequest) ProtoMessage() {}

func (x *AddBlackMaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlackMaskRequest.ProtoReflect.Descriptor instead.
func (*AddBlackMaskRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *AddBlackMaskRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type DropBlackMaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask string `protobuf:"bytes,1,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *DropBlackMaskRequest) Reset() {
	*x = DropBlackMaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropBlackMaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropBlackMaskRequest) ProtoMessage() {}

func (x *DropBlackMaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropBlackMaskRequest.ProtoReflect.Descriptor instead.
func (*DropBlackMaskRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *DropBlackMaskRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type SuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SuccessResponse) Reset() {
	*x = SuccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessResponse) ProtoMessage() {}

func (x *SuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessResponse.ProtoReflect.Descriptor instead.
func (*SuccessResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *SuccessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_api_api_proto protoreflect.FileDescriptor

var file_api_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x3a, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x22, 0x29, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x2a,
	0x0a, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x29, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x90,
	0x03, 0x0a, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x42, 0x72, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x72, 0x6f, 0x70, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0d, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x05, 0x5a, 0x03, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_api_proto_rawDescOnce sync.Once
	file_api_api_proto_rawDescData = file_api_api_proto_rawDesc
)

func file_api_api_proto_rawDescGZIP() []byte {
	file_api_api_proto_rawDescOnce.Do(func() {
		file_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_rawDescData)
	})
	return file_api_api_proto_rawDescData
}

var file_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_api_proto_goTypes = []interface{}{
	(*CheckRequest)(nil),         // 0: api.CheckRequest
	(*ClearBucketRequest)(nil),   // 1: api.ClearBucketRequest
	(*AddWhiteMaskRequest)(nil),  // 2: api.AddWhiteMaskRequest
	(*DropWhiteMaskRequest)(nil), // 3: api.DropWhiteMaskRequest
	(*AddBlackMaskRequest)(nil),  // 4: api.AddBlackMaskRequest
	(*DropBlackMaskRequest)(nil), // 5: api.DropBlackMaskRequest
	(*SuccessResponse)(nil),      // 6: api.SuccessResponse
}
var file_api_api_proto_depIdxs = []int32{
	0, // 0: api.AntiBruteForce.Check:input_type -> api.CheckRequest
	2, // 1: api.AntiBruteForce.AddWhiteMask:input_type -> api.AddWhiteMaskRequest
	3, // 2: api.AntiBruteForce.DropWhiteMask:input_type -> api.DropWhiteMaskRequest
	4, // 3: api.AntiBruteForce.AddBlackMask:input_type -> api.AddBlackMaskRequest
	5, // 4: api.AntiBruteForce.DropBlackMask:input_type -> api.DropBlackMaskRequest
	1, // 5: api.AntiBruteForce.ClearBucket:input_type -> api.ClearBucketRequest
	6, // 6: api.AntiBruteForce.Check:output_type -> api.SuccessResponse
	6, // 7: api.AntiBruteForce.AddWhiteMask:output_type -> api.SuccessResponse
	6, // 8: api.AntiBruteForce.DropWhiteMask:output_type -> api.SuccessResponse
	6, // 9: api.AntiBruteForce.AddBlackMask:output_type -> api.SuccessResponse
	6, // 10: api.AntiBruteForce.DropBlackMask:output_type -> api.SuccessResponse
	6, // 11: api.AntiBruteForce.ClearBucket:output_type -> api.SuccessResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_api_proto_init() }
func file_api_api_proto_init() {
	if File_api_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWhiteMaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropWhiteMaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBlackMaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropBlackMaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_api_proto_goTypes,
		DependencyIndexes: file_api_api_proto_depIdxs,
		MessageInfos:      file_api_api_proto_msgTypes,
	}.Build()
	File_api_api_proto = out.File
	file_api_api_proto_rawDesc = nil
	file_api_api_proto_goTypes = nil
	file_api_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AntiBruteForceClient is the client API for AntiBruteForce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AntiBruteForceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	AddWhiteMask(ctx context.Context, in *AddWhiteMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	DropWhiteMask(ctx context.Context, in *DropWhiteMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	AddBlackMask(ctx context.Context, in *AddBlackMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	DropBlackMask(ctx context.Context, in *DropBlackMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	ClearBucket(ctx context.Context, in *ClearBucketRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type antiBruteForceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceClient(cc grpc.ClientConnInterface) AntiBruteForceClient {
	return &antiBruteForceClient{cc}
}

func (c *antiBruteForceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/api.AntiBruteForce/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddWhiteMask(ctx context.Context, in *AddWhiteMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/api.AntiBruteForce/AddWhiteMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) DropWhiteMask(ctx context.Context, in *DropWhiteMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/api.AntiBruteForce/DropWhiteMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddBlackMask(ctx context.Context, in *AddBlackMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/api.AntiBruteForce/AddBlackMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) DropBlackMask(ctx context.Context, in *DropBlackMaskRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/api.AntiBruteForce/DropBlackMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) ClearBucket(ctx context.Context, in *ClearBucketRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/api.AntiBruteForce/ClearBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServer is the server API for AntiBruteForce service.
type AntiBruteForceServer interface {
	Check(context.Context, *CheckRequest) (*SuccessResponse, error)
	AddWhiteMask(context.Context, *AddWhiteMaskRequest) (*SuccessResponse, error)
	DropWhiteMask(context.Context, *DropWhiteMaskRequest) (*SuccessResponse, error)
	AddBlackMask(context.Context, *AddBlackMaskRequest) (*SuccessResponse, error)
	DropBlackMask(context.Context, *DropBlackMaskRequest) (*SuccessResponse, error)
	ClearBucket(context.Context, *ClearBucketRequest) (*SuccessResponse, error)
}

// UnimplementedAntiBruteForceServer can be embedded to have forward compatible implementations.
type UnimplementedAntiBruteForceServer struct {
}

func (*UnimplementedAntiBruteForceServer) Check(context.Context, *CheckRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedAntiBruteForceServer) AddWhiteMask(context.Context, *AddWhiteMaskRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhiteMask not implemented")
}
func (*UnimplementedAntiBruteForceServer) DropWhiteMask(context.Context, *DropWhiteMaskRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropWhiteMask not implemented")
}
func (*UnimplementedAntiBruteForceServer) AddBlackMask(context.Context, *AddBlackMaskRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackMask not implemented")
}
func (*UnimplementedAntiBruteForceServer) DropBlackMask(context.Context, *DropBlackMaskRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropBlackMask not implemented")
}
func (*UnimplementedAntiBruteForceServer) ClearBucket(context.Context, *ClearBucketRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearBucket not implemented")
}

func RegisterAntiBruteForceServer(s *grpc.Server, srv AntiBruteForceServer) {
	s.RegisterService(&_AntiBruteForce_serviceDesc, srv)
}

func _AntiBruteForce_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AntiBruteForce/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddWhiteMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWhiteMaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddWhiteMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AntiBruteForce/AddWhiteMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddWhiteMask(ctx, req.(*AddWhiteMaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_DropWhiteMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropWhiteMaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).DropWhiteMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AntiBruteForce/DropWhiteMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).DropWhiteMask(ctx, req.(*DropWhiteMaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddBlackMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlackMaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddBlackMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AntiBruteForce/AddBlackMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddBlackMask(ctx, req.(*AddBlackMaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_DropBlackMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropBlackMaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).DropBlackMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AntiBruteForce/DropBlackMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).DropBlackMask(ctx, req.(*DropBlackMaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_ClearBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).ClearBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AntiBruteForce/ClearBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).ClearBucket(ctx, req.(*ClearBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AntiBruteForce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AntiBruteForce",
	HandlerType: (*AntiBruteForceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _AntiBruteForce_Check_Handler,
		},
		{
			MethodName: "AddWhiteMask",
			Handler:    _AntiBruteForce_AddWhiteMask_Handler,
		},
		{
			MethodName: "DropWhiteMask",
			Handler:    _AntiBruteForce_DropWhiteMask_Handler,
		},
		{
			MethodName: "AddBlackMask",
			Handler:    _AntiBruteForce_AddBlackMask_Handler,
		},
		{
			MethodName: "DropBlackMask",
			Handler:    _AntiBruteForce_DropBlackMask_Handler,
		},
		{
			MethodName: "ClearBucket",
			Handler:    _AntiBruteForce_ClearBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
